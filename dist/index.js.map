{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAMA,iDAAyD;AACzD,8CAAmD;AAEnD,+BAA0B;AAE1B,sBAA6B,MAAoB;IAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,OAAO,IAAI,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,QAAQ,GAAgB,MAAM,CAAC,QAAuB,CAAC;QAE7D,MAAM,CAAC,IAAI,wBAAgB,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAa,MAAM,CAAC,QAAoB,CAAC;QAEvD,MAAM,CAAC,IAAI,qBAAa,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAC;AACJ,CAAC;AAdD,oCAcC;AAED,uBAAuB,GAAQ;IAC7B,MAAM,CAAC,GAAG,CAAC,eAAe,KAAK,SAAS,CAAC;AAC3C,CAAC;AAED,oBAAoB,GAAQ;IAC1B,MAAM,CAAC,CACL,GAAG,CAAC,WAAW,KAAK,SAAS;QAC7B,GAAG,CAAC,eAAe,KAAK,SAAS;QACjC,GAAG,CAAC,MAAM,KAAK,SAAS,CACzB,CAAC;AACJ,CAAC","file":"index.js","sourcesContent":["import {\n  BlobStorageClient,\n  LocalConfig,\n  ModuleConfig,\n  S3Config,\n} from './definitions';\nimport { LocalBlobStorage } from './clients/local/index';\nimport { S3BlobStorage } from './clients/s3/index';\n\nexport * from './clients';\n\nexport function getBlobStore(config: ModuleConfig): BlobStorageClient {\n  if (config.provider === 'local' && isLocalConfig(config.settings)) {\n    const settings: LocalConfig = config.settings as LocalConfig;\n\n    return new LocalBlobStorage(settings);\n  } else if (config.provider === 's3' && isS3Config(config.settings)) {\n    const settings: S3Config = config.settings as S3Config;\n\n    return new S3BlobStorage(settings);\n  }\n\n  throw new Error(\n    'invalid config, ensure the provider and providerConfig match'\n  );\n}\n\nfunction isLocalConfig(obj: any): obj is LocalConfig {\n  return obj.storageLocation !== undefined;\n}\n\nfunction isS3Config(obj: any): obj is S3Config {\n  return (\n    obj.accessKeyId !== undefined &&\n    obj.secretAccessKey !== undefined &&\n    obj.region !== undefined\n  );\n}\n"],"sourceRoot":"/Users/elliotblackburn/code/blob-storage/src"}