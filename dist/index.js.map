{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAAA,+BAA+B;AAO/B,2CAAmD;AACnD,qCAA6C;AAE7C,+BAA0B;AAE1B,sBAA6B,MAAoB;IAC/C,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IAEvD,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,OAAO,IAAI,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,QAAQ,GAAgB,MAAM,CAAC,QAAuB,CAAC;QAE7D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,CAAC,IAAI,wBAAgB,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAa,MAAM,CAAC,QAAoB,CAAC;QAEvD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;YACvD,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC;YACpB,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,eAAe,EAAE,QAAQ,CAAC,eAAe;SAC1C,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,kBAAa,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAC;AACJ,CAAC;AA7BD,oCA6BC;AAED,uBAAuB,GAAQ;IAC7B,MAAM,CAAC,GAAG,CAAC,eAAe,KAAK,SAAS,CAAC;AAC3C,CAAC;AAED,oBAAoB,GAAQ;IAC1B,MAAM,CAAC,GAAG,CAAC,WAAW,KAAK,SAAS,IAAI,GAAG,CAAC,eAAe,KAAK,SAAS,CAAC;AAC5E,CAAC","file":"index.js","sourcesContent":["import * as AWS from 'aws-sdk';\nimport {\n  BlobStorageClient,\n  LocalConfig,\n  ModuleConfig,\n  S3Config,\n} from './definitions';\nimport { LocalBlobStorage } from './clients/local';\nimport { S3BlobStorage } from './clients/s3';\n\nexport * from './clients';\n\nexport function getBlobStore(config: ModuleConfig): BlobStorageClient {\n  config.provider = config.provider.toLowerCase().trim();\n\n  if (config.provider === 'local' && isLocalConfig(config.settings)) {\n    const settings: LocalConfig = config.settings as LocalConfig;\n\n    if (!settings.storageLocation) {\n      throw new Error('storageLocation cannot be empty');\n    }\n\n    return new LocalBlobStorage(settings);\n  } else if (config.provider === 's3' && isS3Config(config.settings)) {\n    const settings: S3Config = config.settings as S3Config;\n\n    if (!settings.accessKeyId || !settings.secretAccessKey) {\n      throw new Error('accessKeyId and secretAccessKey cannot be empty');\n    }\n\n    const s3 = new AWS.S3({\n      accessKeyId: settings.accessKeyId,\n      secretAccessKey: settings.secretAccessKey,\n    });\n\n    return new S3BlobStorage(s3);\n  }\n\n  throw new Error(\n    'invalid config, ensure the provider and providerConfig match'\n  );\n}\n\nfunction isLocalConfig(obj: any): obj is LocalConfig {\n  return obj.storageLocation !== undefined;\n}\n\nfunction isS3Config(obj: any): obj is S3Config {\n  return obj.accessKeyId !== undefined && obj.secretAccessKey !== undefined;\n}\n"],"sourceRoot":"/Users/elliotblackburn/code/blob-storage/src"}