{"version":3,"sources":["../src/clients/local/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as path from 'path';\nimport {\n  copyFile as copyFileCb,\n  unlink,\n  access as accessCb,\n  constants,\n  PathLike,\n} from 'fs';\nimport * as mkdirpCb from 'mkdirp';\nimport * as Bluebird from 'bluebird';\nimport { BaseStorage } from '../base';\nimport { LocalConfig } from '../../definitions';\n\nconst access = <(\n  path: PathLike,\n  mode: number | undefined\n) => Bluebird<void>>Bluebird.promisify(accessCb);\nconst mkdirp = Bluebird.promisify(mkdirpCb);\nconst copyFile = Bluebird.promisify(copyFileCb);\nconst deleteFile = Bluebird.promisify(unlink);\n\nexport class LocalBlobStorage extends BaseStorage {\n  private storageLocation: string;\n\n  constructor(config: LocalConfig) {\n    super();\n\n    if (!config.storageLocation) {\n      throw new Error('storageLocation cannot be empty');\n    }\n\n    this.storageLocation = config.storageLocation;\n  }\n\n  public setItem(\n    key: string,\n    filePath: string,\n    locationId: string,\n    itemType?: string\n  ): PromiseLike<string> {\n    let destinationDir: string = path.join(this.storageLocation, locationId);\n\n    if (itemType) {\n      destinationDir = path.join(destinationDir, itemType);\n    }\n\n    let destination: string = path.join(destinationDir, key);\n\n    return createDirIfItDoesntExist(destinationDir)\n      .then(() => {\n        return copyFile(filePath, destination);\n      })\n      .then(() => {\n        return destination;\n      })\n      .catch((err: NodeJS.ErrnoException) => {\n        if (err.code === 'ENOENT') {\n          throw new Error('File does not exist or user does not have access');\n        } else {\n          throw new Error(\n            'Failed to set item, does it exist and does this process have access to the file?'\n          );\n        }\n      });\n  }\n\n  public deleteItem(\n    key: string,\n    locationId: string,\n    itemType?: string\n  ): PromiseLike<void> {\n    let filePath: string;\n    if (itemType) {\n      filePath = path.join(this.storageLocation, locationId, itemType, key);\n    } else {\n      filePath = path.join(this.storageLocation, locationId, key);\n    }\n\n    return deleteFile(filePath)\n      .then(() => {\n        Bluebird.resolve();\n      })\n      .catch((err: NodeJS.ErrnoException) => {\n        throw new Error('Failed to delete item');\n      });\n  }\n}\n\nfunction createDirIfItDoesntExist(dir: string) {\n  return access(dir, constants.W_OK)\n    .then(() => {\n      return Bluebird.resolve();\n    })\n    .catch((err: NodeJS.ErrnoException) => {\n      return mkdirp(dir);\n    });\n}\n"],"sourceRoot":"/Users/elliotblackburn/code/blob-storage/src"}