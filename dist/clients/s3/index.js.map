{"version":3,"sources":["../src/clients/s3/index.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,+BAA+B;AAE/B,qCAAqC;AACrC,kCAAsC;AAEtC,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AAE3C,mBAA2B,SAAQ,kBAAW;IAG5C,YAAY,EAAuB;QACjC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IAED;;;;;;;OAOG;IACI,OAAO,CACZ,GAAW,EACX,QAAgB,EAChB,UAAkB,EAClB,QAAiB;QAEjB,gCAAgC;QAChC,MAAM,MAAM,GAAW,UAAU,CAAC;QAClC,MAAM,OAAO,GAAW,QAAQ,CAAC,CAAC,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAE9D,4BAA4B;QAC5B,MAAM,UAAU,GAAkB,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE;YAC9D,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,MAAM,YAAY,GAAkC;YAClD,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,OAAO;YACZ,IAAI,EAAE,UAAU;SACjB,CAAC;QAEF,4FAA4F;QAC5F,MAAM,CAAC,IAAI,QAAQ,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,IAAI,CAAC,EAAE,CAAC,MAAM,CACZ,YAAY,EACZ,CAAC,GAAU,EAAE,IAAmC,EAAE,EAAE;gBAClD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzB,CAAC;YACH,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACI,UAAU,CACf,GAAW,EACX,UAAkB,EAClB,QAAiB;QAEjB,MAAM,OAAO,GAAW,QAAQ,CAAC,CAAC,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAE9D,MAAM,cAAc,GAAqC;YACvD,MAAM,EAAE,UAAU;YAClB,GAAG,EAAE,OAAO;SACb,CAAC;QAEF,4FAA4F;QAC5F,MAAM,CAAC,IAAI,QAAQ,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC,GAAiB,EAAE,EAAE;gBAChE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AApFD,sCAoFC","file":"index.js","sourcesContent":["import * as fs from 'fs';\nimport * as AWS from 'aws-sdk';\nimport * as MockAWS from 'mock-aws-s3';\nimport * as Bluebird from 'bluebird';\nimport { BaseStorage } from '../base';\n\nAWS.config.setPromisesDependency(Bluebird);\n\nexport class S3BlobStorage extends BaseStorage {\n  private s3: AWS.S3 | MockAWS.S3;\n\n  constructor(s3: AWS.S3 | MockAWS.S3) {\n    super();\n\n    this.s3 = s3;\n  }\n\n  /**\n   * Uploads a blob to AWS S3\n   * @param {string} key - Name of the file\n   * @param {string} filePath - Full file path\n   * @param {string} locationId - The S3 bucket.\n   * @param {string} itemType - Type of item being uploaded\n   * @returns {Promise<any>}\n   */\n  public setItem(\n    key: string,\n    filePath: string,\n    locationId: string,\n    itemType?: string\n  ): PromiseLike<any> {\n    // locationId is the bucket name\n    const bucket: string = locationId;\n    const itemKey: string = itemType ? itemType + '/' + key : key;\n\n    // Open a stream to the blob\n    const blobStream: fs.ReadStream = fs.createReadStream(filePath, {\n      flags: 'r',\n      encoding: null,\n    });\n\n    const uploadParams: AWS.S3.Types.PutObjectRequest = {\n      Bucket: bucket,\n      Key: itemKey,\n      Body: blobStream,\n    };\n\n    // Can't use the AWS `.promise` because MockAWS doesn't support it, so we'll just wrap it up\n    return new Bluebird((resolve, reject) => {\n      this.s3.upload(\n        uploadParams,\n        (err: Error, data: AWS.S3.ManagedUpload.SendData) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data.Location);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Deletes a blob form AWS S3\n   * @param {string} key - The name of the file\n   * @param {string} locationId - The S3 bucket\n   * @param {string} itemType - The item type\n   * @returns {Promise<any>}\n   */\n  public deleteItem(\n    key: string,\n    locationId: string,\n    itemType?: string\n  ): PromiseLike<any> {\n    const itemKey: string = itemType ? itemType + '/' + key : key;\n\n    const deletionParams: AWS.S3.Types.DeleteObjectRequest = {\n      Bucket: locationId,\n      Key: itemKey,\n    };\n\n    // Can't use the AWS `.promise` because MockAWS doesn't support it, so we'll just wrap it up\n    return new Bluebird((resolve, reject) => {\n      return this.s3.deleteObject(deletionParams, (err: AWS.AWSError) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n}\n"],"sourceRoot":"/Users/elliotblackburn/code/blob-storage/src"}